#include <bits/stdc++.h>

using namespace std;



class Solution {
  public:
    int circularSubarraySum(vector<int> &arr) {

        int n = arr.size();
        int max_kadane = INT_MIN, min_kadane = INT_MAX;
        int total = 0, curr_max = 0, curr_min = 0;

        for (int i = 0; i < n; i++) {
            curr_max = max(arr[i], curr_max + arr[i]);
            max_kadane = max(max_kadane, curr_max);

            curr_min = min(arr[i], curr_min + arr[i]);
            min_kadane = min(min_kadane, curr_min);

            total += arr[i];
        }

        if (max_kadane < 0)  
            return max_kadane;

        return max(max_kadane, total - min_kadane);
    }
};

int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> arr;
        string input;

        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }

        Solution ob;
        int res = ob.circularSubarraySum(arr);

        cout << res << endl;
        cout << "~" << endl;
    }
    return 0;
}
